//$Header: /Development/AEDevelopment/projects/org.activebpel.rt.bpel.server/src/org/activebpel/rt/bpel/server/coord/subprocess/AeSpCoordinationMessages.java,v 1.3 2006/06/26 18:28:2
/*
 * Copyright (c) 2004-2006 Active Endpoints, Inc.
 *
 * This program is licensed under the terms of the GNU General Public License
 * Version 2 (the "License") as published by the Free Software Foundation, and 
 * the ActiveBPEL Licensing Policies (the "Policies").  A copy of the License 
 * and the Policies were distributed with this program.  
 *
 * The License is available at:
 * http: *www.gnu.org/copyleft/gpl.html
 *
 * The Policies are available at:
 * http: *www.activebpel.org/licensing/index.html
 *
 * Unless required by applicable law or agreed to in writing, this program is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, either express or implied.  See the License and the Policies
 * for specific language governing the use of this program.
 */
package org.activebpel.rt.bpel.server.coord.subprocess;

import org.activebpel.rt.bpel.coord.IAeProtocolMessage;
import org.activebpel.rt.bpel.server.coord.AeProtocolMessage;

/**
 * Coordination messages used in the AE subprocess Participant Completion coordination protocol.
 */
public class AeSpCoordinationMessages
{
   //
   // Coordinator generated:
   //
   /** Close message. */
   public static final IAeProtocolMessage CLOSE = new AeProtocolMessage("aesp:Close");  //$NON-NLS-1$
   
   /** Cancel message */
   public static final IAeProtocolMessage CANCEL = new AeProtocolMessage("aesp:Cancel");  //$NON-NLS-1$
   
   /** Compensate message */
   public static final IAeProtocolMessage COMPENSATE = new AeProtocolMessage("aesp:Compensate");  //$NON-NLS-1$
   
   /** Compensate (if completed) or Cancel (if active) message */
   public static final IAeProtocolMessage COMPENSATE_OR_CANCEL = new AeProtocolMessage("aesp:CompensateOrCancel");  //$NON-NLS-1$
      
   /** FORGET message */
   public static final IAeProtocolMessage FORGET = new AeProtocolMessage("aesp:Forget");  //$NON-NLS-1$   

   //
   // generated by either the coordinate or participant:
   //
   
   /** Faulted message. */
   public static final IAeProtocolMessage FAULTED = new AeProtocolMessage("aesp:Faulted");  //$NON-NLS-1$
   
   // generated by participant   
   /** EXITED message */
   public static final IAeProtocolMessage EXITED = new AeProtocolMessage("aesp:Exited");  //$NON-NLS-1$
   
   /** Process canceled message. */
   public static final IAeProtocolMessage CANCELED = new AeProtocolMessage("aesp:Canceled");  //$NON-NLS-1$
   
   /** Process completed message. */
   public static final IAeProtocolMessage COMPLETED = new AeProtocolMessage("aesp:Completed");  //$NON-NLS-1$
   
   /** Process closed message. */
   public static final IAeProtocolMessage CLOSED = new AeProtocolMessage("aesp:Closed");  //$NON-NLS-1$
   
   /** Compensated messaged. */
   public static final IAeProtocolMessage COMPENSATED = new AeProtocolMessage("aesp:Compensated");  //$NON-NLS-1$
   
   /** Faulted while active message */
   public static final IAeProtocolMessage FAULTED_ACTIVE = new AeProtocolMessage("aesp:FaultedActive");  //$NON-NLS-1$
   
   /** Faulted while compensating message. */
   public static final IAeProtocolMessage FAULTED_COMPENSATING = new AeProtocolMessage("aesp:FaultedCompensating");  //$NON-NLS-1$
   
   // todo: Need messages for wsba:GetStatus and wsba:Status.
   
   
   /**
    * Convenience method to create new message signal based on the data of the another message.
    * @param aSignal new signal
    * @param aMessage original message (source).
    */
   public static IAeProtocolMessage create(String aSignal, IAeProtocolMessage aMessage)
   {
      IAeProtocolMessage rVal = new  AeProtocolMessage(aSignal, aMessage.getCoordinationId(), aMessage.getFault());
      return rVal;
   }
}
