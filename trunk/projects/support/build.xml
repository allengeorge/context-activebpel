<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="../" default="help" name="Buildfile for Active Endpoints Project Management Procedures">
    <target name="help">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp"></arg>
        </java>
    </target>
    <target name="base.init">
        <property name="cvs.noexec" value="false"></property>
        <property name="cvs.quiet" value="true"></property>
        <property name="cvs.really.quiet" value="true"></property>
        <property name="root" value="${basedir}"></property>
        <property name="devroot" value="${basedir}/.."></property>
        <property name="eclipse.home" value="/eclipse"></property>
        <property name="ae.dist" value="${devroot}/dist"></property>
        <property name="ae.lib" value="${devroot}/lib/"></property>
        <property name="ae.mail.user" value="aedevelopment01@active-endpoints.com"></property>
        <property name="ae.mail.password" value="bp3l3pb"></property>
        <tstamp>
            <format pattern="yyyyMMddHHmm" property="ae.timestamp"></format>
        </tstamp>
    </target>
    <target depends="base.init, project.props.init, project.tag.init" name="project.init">
        <property name="ae.project.patch.tag" value=""></property>
        <property name="ae.project.patch.desc" value=""></property>
    </target>
    <target if="aux.project.properties" name="project.props.aux.init">
        <loadproperties srcFile="support/${aux.project.properties}"></loadproperties>
    </target>
    <target depends="base.init" name="project.props.base.init">
        <basename file="${propfile}" property="project" suffix=".properties"></basename>
        <available file="${project}/ae.build.properties" property="propfile.exists" type="file" value="./${project}/ae.build.properties"></available>
        <available file="${project}/ae.build.properties" property="project.rel.root" type="file" value="../projects"></available>
        <available file="../projects.net/${project}/ae.build.properties" property="propfile.exists" type="file" value="../projects.net/${project}/ae.build.properties"></available>
        <available file="../projects.net/${project}/ae.build.properties" property="project.rel.root" type="file" value="../projects.net"></available>
        <property location="${project.rel.root}" name="projectsroot"></property>
        <fail unless="propfile.exists">You must set the project to build!
         For example: ant -Dproject=com.activee.rt</fail>
        <loadproperties srcFile="${propfile.exists}"></loadproperties>
        <property location="${projectsroot}/${project}" name="projectloc"></property>
        <property location="${projectloc}/src/" name="ae.src"></property>
        <property location="${ae.src}" name="ae.java.src"></property>
        <property location="${projectloc}/classes/" name="ae.classes"></property>
        <property name="output.jardir" value="${ae.dist}"></property>
        <property name="ae.buildpackage" value="${cvspackage}${project}/src/${buildnum.dir}"></property>
        <property name="project.relative.path" value="${project.rel.root}/${project}"></property>
        <property name="ae.buildnum" value="${project.relative.path}/src/${buildnum.dir}${buildnum.file}"></property>
        <available file="${projectloc}/CVS/Tag" property="ae.project.patch" value="true"></available>
        <mkdir dir="${ae.classes}"></mkdir>
        <mkdir dir="${ae.dist}"></mkdir>
    </target>
    <target depends="base.init, project.props.base.init, project.props.aux.init" name="project.props.init"></target>
    <target if="ae.project.patch" name="project.tag.init">
        <loadfile property="ae.project.patch.tag.temp" srcFile="${projectloc}/CVS/Tag">
            <filterchain>
                <striplinebreaks></striplinebreaks>
            </filterchain>
        </loadfile>
        <script language="javascript">project.setProperty("ae.project.patch.tag", project.getProperty("ae.project.patch.tag.temp").substring(1) );</script>
        <property name="ae.project.patch.desc" value=" branch ${ae.project.patch.tag}"></property>
    </target>
    <target depends="base.init" description="Backup the projects and project.net directory tree" name="backup.projects.and.dotnet">
        <antcall target="backup"></antcall>
        <antcall target="backup.projects.dotnet"></antcall>
    </target>
    <target depends="base.init" description="Backup the project.net directory tree" name="backup.projects.dotnet">
        <property name="ae.backup.file" value="Backup.Net"></property>
        <property location="${devroot}/projects.net" name="ae.backup.base"></property>
        <antcall target="backup"></antcall>
    </target>
    <target depends="project.init" description="Remove previously built classes" name="clean" unless="project.nocompile">
        <echo message="Cleaning classes..."></echo>
        <delete dir="${ae.classes}/org" quiet="true"></delete>
        <delete dir="${ae.classes}/com" quiet="true"></delete>
        <delete dir="${ae.classes}/WEB-INF" quiet="true"></delete>
        <delete dir="${ae.classes}/META-INF" quiet="true"></delete>
    </target>
    <target depends="project.init" description="Compile source for the specified project" name="compile" unless="project.nocompile">
        <echo message="Compiling source code in ${ae.java.src}"></echo>
        <javac classpath="${project.class.path}" debug="${compile.debug}" deprecation="${deprecation}" destdir="${ae.classes}" failonerror="${fail}" optimize="${compile.optimize}" srcdir="${ae.java.src}"></javac>
        <echo message="Copying support files from ${ae.src}"></echo>
        <copy todir="${ae.classes}">
            <fileset dir="${ae.src}">
                <include name="META-INF/**/*.*"></include>
                <include name="WEB-INF/**/*.*"></include>
                <include name="**/*.xml"></include>
                <include name="**/*.xsd"></include>
                <include name="**/*.htm"></include>
                <include name="**/*.html"></include>
                <include name="**/*.xsl"></include>
                <include name="**/*.properties"></include>
                <include name="**/*.gif"></include>
                <include name="**/*.jpg"></include>
                <include name="**/*.jpeg"></include>
                <include name="**/*.png"></include>
                <include name="**/*.css"></include>
                <include name="**/*.js"></include>
            </fileset>
        </copy>
    </target>
    <target depends="compile, internal.aux.build" description="Create the java archive file for the specified project" name="jar_noclean" unless="project.nojar">
        <echo message="Creating java archive library: ${output.jarfile}"></echo>
        <delete file="${output.jardir}/${output.jarfile}" quiet="true"></delete>
        <jar jarfile="${output.jardir}/${output.jarfile}">
            <fileset dir="${ae.classes}">
                <include name="META-INF/**/*.*"></include>
                <include name="WEB-INF/**/*.*"></include>
                <include name="**/*.class"></include>
                <include name="**/*.xml"></include>
                <include name="**/*.xsd"></include>
                <include name="**/*.htm"></include>
                <include name="**/*.html"></include>
                <include name="**/*.xsl"></include>
                <include name="**/*.properties"></include>
                <include name="**/*.gif"></include>
                <include name="**/*.jpg"></include>
                <include name="**/*.jpeg"></include>
                <include name="**/*.png"></include>
                <include name="**/*.css"></include>
                <include name="**/*.js"></include>
                <exclude name="**/package.html"></exclude>
            </fileset>
        </jar>
        <antcall target="internal.aux.post.build"></antcall>
    </target>
    <target depends="base.init, compile, internal.aux.war.build, internal.aux.post.build" if="project.war" name="war">
        <delete failonerror="false" file="${output.jardir}/${output.jarfile}" quiet="true"></delete>
        <war destfile="${output.jardir}/${output.jarfile}" webxml="${projectloc}/metadata/web.xml">
            <fileset dir="${projectloc}/war" excludes="CVS/*,*.jar"></fileset>
            <metainf dir="${projectloc}/metadata">
                <exclude name="web.xml"></exclude>
            </metainf>
            <classes dir="${projectloc}/classes"></classes>
        </war>
    </target>
    <target depends="clean, jar_noclean, war" description="Clean classes and create the java archive file for the specified project" name="jar"></target>
    <target depends="compile" if="aux.build" name="internal.aux.build">
        <echo message="Executing pre-jar build"></echo>
        <ant dir="${aux.build}"></ant>
    </target>
    <target if="aux.post.build" name="internal.aux.post.build">
        <echo message="Executing post-jar build"></echo>
        <ant dir="${aux.post.build}"></ant>
    </target>
    <target depends="compile" if="aux.war.build" name="internal.aux.war.build">
        <ant dir="${aux.war.build}"></ant>
    </target>
    <target depends="project.init" description="Generate javadocs for the specified project" if="perform.javadoc" name="javadoc">
        <echo message="Generating Javadoc"></echo>
        <javadoc access="private" author="true" classpath="${project.class.path}" defaultexcludes="yes" destdir="${projectloc}/doc" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="com.activee.*,org.activebpel.*" sourcepath="${ae.src}" splitindex="true" use="true" version="true" windowtitle="${project} API">
            <link href="${project.javadoc.link1}"></link>
            <link href="${project.javadoc.link2}"></link>
            <link href="${project.javadoc.link3}"></link>
            <link href="${project.javadoc.link4}"></link>
            <link href="${project.javadoc.link5}"></link>
            <link href="${project.javadoc.link6}"></link>
            <link href="${project.javadoc.link7}"></link>
            <link href="${project.javadoc.link8}"></link>
            <tag description="To do:" name="todo"></tag>
            <doctitle>                <![CDATA[<h1></h1>]]>
${project} API</doctitle>
            <bottom>                <![CDATA[<i>Copyright &#169; 2003, 2004 Active Endpoints. All Rights Reserved.</i>]]>
</bottom>
        </javadoc>
    </target>
    <target depends="checkin.lockfile.handler" name="checkin.cancel">
        <mail encoding="auto" failonerror="false" from="buildnotice@active-endpoints.com" mailhost="mail.active-endpoints.com" message="${user.name} canceling checkin" messagemimetype="text/plain" password="${ae.mail.password}" subject="${user.name} canceling checkin." tolist="${ae.mail.dist}" user="${ae.mail.user}"></mail>
        <delete failonerror="false" file="${ae.lockfile}"></delete>
    </target>
    <target depends="base.init,checkinstart.lockfile.handler" name="checkin.start">
        <echo message="Lockfile acquired. Starting checkin...."></echo>
        <input addproperty="unit.test.passed" message="Have unit tests run successfully?" validargs="y,n"></input>
        <mail encoding="auto" failonerror="false" from="buildnotice@active-endpoints.com" mailhost="mail.active-endpoints.com" messagemimetype="text/plain" password="${ae.mail.password}" subject="${user.name} starting checkin." tolist="${ae.mail.dist}" user="${ae.mail.user}">
            <message>${user.name} acquired lockfile. Starting checkin...
           Unit Test Successful: ${unit.test.passed}</message>
        </mail>
        <echo message="Proceed with checkin."></echo>
    </target>
    <target depends="lockfile.exists,create.lockfile,get.lockfile.owner" name="checkinstart.lockfile.handler">
        <fail message="Checkin already in progress: ${lock.owner}" unless="lockfile.acquired"></fail>
    </target>
    <target depends="lockfile.exists,get.lockfile.owner" name="checkin.lockfile.handler">
        <fail message="Lockfile not found. Run checkin.start to acquire lockfile." unless="lockfile.exists"></fail>
        <fail message="Not lockfile owner. ${lock.owner} is owner." unless="lockfile.acquired"></fail>
    </target>
    <target depends="base.init" name="lockfile.exists">
        <condition property="lockfile.exists">
            <available file="${ae.lockfile}"></available>
        </condition>
        <echo message="${lockfile.exists}"></echo>
    </target>
    <target if="lockfile.exists" name="get.lockfile.owner">
        <loadproperties srcFile="${ae.lockfile}"></loadproperties>
        <condition property="lockfile.acquired">
            <equals arg1="${user.name}" arg2="${lock.owner}" casesensitive="false" trim="true"></equals>
        </condition>
    </target>
    <target name="create.lockfile" unless="lockfile.exists">
        <echo message="Checkin lockfile acquired"></echo>
        <concat destfile="${ae.lockfile}">lock.owner=${user.name}</concat>
        <property name="lockfile.exists" value="true"></property>
    </target>
    <target name="debug">
        <echo message="Setting debug properties"></echo>
        <property name="cvs.noexec" value="true"></property>
        <property name="cvs.quiet" value="false"></property>
        <property name="cvs.really.quiet" value="false"></property>
    </target>
</project>

